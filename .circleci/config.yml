# To successfully complete end-to-end tests including deployment
# some variables need to be defined in the CircleCI environment
#
# AWS_ACCESS_KEY_ID       - Access key to provision resources
# AWS_SECRET_ACCESS_KEY   - Access key secret to provision resources
# TF_VAR_key_name         - An ssh key name that exists in the account that is being provisioned to
version: 2.1
commands:
  # CircleCI generally only triggers builds on commits to the main repository,
  # so PRs coming from branches of the main repo simply reference builds for existing commits
  # (CIRCLE_BRANCH=branchname and CIRCLE_PR_NUMBER is unset);
  # The only time PRs will trigger a build is when the PR is referencing a fork
  # (CIRCLE_BRANCH=pull/XXX and CIRCLE_PR_NUMBER=XXX).
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Will not deploy PRs, so marking this step successful"
              circleci step halt
            fi

  early_return_for_unchanged_templates:
    description: >-
      Only build templates that has been modified. This ensures that documentation changes,
      and changes to other template directories do not trigger a full system rebuild, which
      can take hours, just to get the result of the affected changes.
    parameters:
      tfvarsfile:
        type: string
        default: notspecified
    steps:
      - run:
          name: Early return if neither template files nor << parameters.tfvarsfile >> affected by changes
          command: |
            set +eo pipefail
            # Changes to .tf should trigger build for all .tfvars, changes in .tfvar should only trigger that run
            changeset=$(git diff --name-only origin/master)
            relevant_changes=$(echo "$changeset" | grep -E "<< parameters.templatedir >>/(.*.tf)|(<< parameters.tfvarsfile >>)")
            if [[ -n "${relevant_changes}" ]]; then
              echo "Found relevant changes in changeset"
              echo "${relevant_changes}"
              echo "Will perform full build"
            else
              echo "Will not deploy commits not affecting this configuration"
              echo "${changeset}"
              circleci step halt
            fi
jobs:
  build:
    docker:
      - image: hashicorp/terraform:0.11.14
    parameters:
      tfvarsfile:
        type: string
        default: notspecified
    environment:
      - TF_VAR_aws_region: eu-west-1
      - tfstatebucket: circlecitfstate
      - tfstatedir: circledeployments
      - tfstateregion: us-east-2
    steps:
      - checkout
      - run:
          name: terraform syntax validation
          command: terraform validate -check-variables=false
      - early_return_for_forked_pull_requests
      - early_return_for_unchanged_templates:
          tfvarsfile: << parameters.tfvarsfile >>
      - run:
          name: Make backend for << parameters.tfvarsfile >>
          command: |
            cat \<<EOF > backend_override.tf
              terraform {
                  backend "s3" {
                    bucket = "${tfstatebucket}"
                    key    = "${tfstatedir}/${CIRCLE_BUILD_NUM}-<< parameters.tfvarsfile >>.tfstate"
                    region = "${tfstateregion}"
                  }
                }
            EOF
      - run: terraform init
      - run: terraform validate
      - run:
          name: terraform plan
          command: terraform plan -var-file=<< parameters.tfvarsfile >> -out=mybuild
      - run:
          name: terraform apply
          command: terraform apply "mybuild"
      - run:
          name: terraform destroy
          command: terraform destroy -force
          when: always
workflows:
  workflow:
    jobs:
      - build:
          tfvarsfile: terraform-icp-ce-example.tfvars
      - build:
          requires:
            - build
          tfvarsfile: terraform-icp-ce-example.tfvars
      # Repeated as many times as there are configurations...
